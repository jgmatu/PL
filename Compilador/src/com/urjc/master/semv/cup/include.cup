/* includes cup */

package com.urjc.master.semv.cup;

import java_cup.runtime.Symbol;

import java.util.ArrayList;
import java.util.List;
import com.urjc.master.semv.types.Type;
import com.urjc.master.semv.enums.EnumType;
import com.urjc.master.semv.list.ListParams;
import com.urjc.master.semv.commands.Function;
import com.urjc.master.semv.commands.Parametro;


parser code {:

	private List<Function> functions = new ArrayList<>();
	
	public List<Function> functions() {
		return this.functions;
	}
	
	@Override 
	public void syntax_error(Symbol s) { 
		int l = s.left + 1;
		int c = s.right + 1;
		report_error("El String: '" + s.value + "' ha producido un error en la linea " + l + ", columna " + c + ".\n", null);
	}	
:};


/* TOKENS */

// terminals
terminal treturn;
terminal l_par;
terminal r_par;
terminal l_brace;
terminal r_brace;
terminal l_bracket;
terminal r_bracket;
terminal comma;
terminal semicolon;
terminal assig;
terminal add;
terminal sub;
terminal mul;
terminal div;
terminal tif;
terminal tthen;
terminal telse;
terminal tfor;
terminal twhile;
terminal tdo;
terminal tuntil;
terminal tnot;
terminal tand;
terminal tor;
terminal equals;
terminal less;
terminal greater;
terminal lessequal;
terminal greaterequal;
terminal include;
terminal String hfile;
terminal constint;
terminal constfloat;
terminal String tvoid;
terminal String tint;
terminal String tfloat;
terminal String tid;

non terminal FILEINC;
non terminal PARTINC;

non terminal Type TYPE;
non terminal ListParams LISTPARAMF;

FILEINC ::= PARTINC {:
	;
:};

FILEINC ::= PARTINC FILEINC {:
	;
:};

PARTINC ::= TYPE:type tid:id l_par LISTPARAMF:params r_par semicolon {:
	functions.add(new Function(id, params, type));
:};

LISTPARAMF ::= LISTPARAMF:params comma TYPE:type tid:id {:
	params.insertar(new Parametro(id, type));
	RESULT = params;
:};

LISTPARAMF ::= TYPE:type tid:id {:
	ListParams params = new ListParams();
	params.insertar(new Parametro(id, type));
	
	RESULT = params;
:} | ;

TYPE ::= tvoid:v {: RESULT =  new Type(EnumType.VOID, vleft); :};
TYPE ::= tint:i {: RESULT =  new Type(EnumType.INT, ileft); :};
TYPE ::= tfloat:f {: RESULT =  new Type(EnumType.FLOAT, fleft); :};

