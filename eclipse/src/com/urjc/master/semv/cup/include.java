
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.urjc.master.semv.cup;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import com.urjc.master.semv.types.Type;
import com.urjc.master.semv.enums.EnumType;
import com.urjc.master.semv.list.ListParams;
import com.urjc.master.semv.commands.Function;
import com.urjc.master.semv.commands.Parametro;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class include extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public include() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public include(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public include(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\010\000\002\005\006\000\002\005\004" +
    "\000\002\005\002\000\002\004\003\000\002\004\003\000" +
    "\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\010\045\007\046\006\047\004\001\002\000" +
    "\004\050\ufff8\001\002\000\004\002\025\001\002\000\004" +
    "\050\ufff9\001\002\000\004\050\ufffa\001\002\000\004\050" +
    "\013\001\002\000\012\002\001\045\007\046\006\047\004" +
    "\001\002\000\004\002\uffff\001\002\000\004\005\014\001" +
    "\002\000\014\006\ufffb\013\ufffb\045\007\046\006\047\004" +
    "\001\002\000\006\006\021\013\020\001\002\000\004\050" +
    "\017\001\002\000\006\006\ufffc\013\ufffc\001\002\000\010" +
    "\045\007\046\006\047\004\001\002\000\004\014\022\001" +
    "\002\000\012\002\ufffe\045\ufffe\046\ufffe\047\ufffe\001\002" +
    "\000\004\050\024\001\002\000\006\006\ufffd\013\ufffd\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\010\002\004\003\010\004\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\011\003\010\004" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\015\005\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$include$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$include$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$include$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private List<Function> functions = new ArrayList<>();
	
	/* Es un metodo que el cual se llama automaticamente al haber un error en la gramatica, 
	con el que informamos de la linea y la columna en el que se encuentra dicho error.*/
	
	@Override 
	public void syntax_error(Symbol s) { 
		int l = s.left + 1;
		int c = s.right + 1;
		report_error("El String: '" + s.value + "' ha producido un error en la linea " + l + ", columna " + c + ".\n", null);
	}
	
	public List<Function> functions() {
		return this.functions;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$include$actions {
  private final include parser;

  /** Constructor */
  CUP$include$actions(include parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$include$do_action_part00000000(
    int                        CUP$include$act_num,
    java_cup.runtime.lr_parser CUP$include$parser,
    java.util.Stack            CUP$include$stack,
    int                        CUP$include$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$include$result;

      /* select the action based on the action number */
      switch (CUP$include$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // FILEINC ::= PARTINC 
            {
              Object RESULT =null;
		
	;

              CUP$include$result = parser.getSymbolFactory().newSymbol("FILEINC",0, ((java_cup.runtime.Symbol)CUP$include$stack.peek()), ((java_cup.runtime.Symbol)CUP$include$stack.peek()), RESULT);
            }
          return CUP$include$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= FILEINC EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$include$stack.elementAt(CUP$include$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$include$stack.elementAt(CUP$include$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$include$stack.elementAt(CUP$include$top-1)).value;
		RESULT = start_val;
              CUP$include$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$include$stack.elementAt(CUP$include$top-1)), ((java_cup.runtime.Symbol)CUP$include$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$include$parser.done_parsing();
          return CUP$include$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FILEINC ::= PARTINC FILEINC 
            {
              Object RESULT =null;
		
	;

              CUP$include$result = parser.getSymbolFactory().newSymbol("FILEINC",0, ((java_cup.runtime.Symbol)CUP$include$stack.elementAt(CUP$include$top-1)), ((java_cup.runtime.Symbol)CUP$include$stack.peek()), RESULT);
            }
          return CUP$include$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PARTINC ::= TYPE tid l_par LISTPARAMF r_par semicolon 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$include$stack.elementAt(CUP$include$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$include$stack.elementAt(CUP$include$top-5)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$include$stack.elementAt(CUP$include$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$include$stack.elementAt(CUP$include$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$include$stack.elementAt(CUP$include$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$include$stack.elementAt(CUP$include$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$include$stack.elementAt(CUP$include$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$include$stack.elementAt(CUP$include$top-2)).right;
		ListParams params = (ListParams)((java_cup.runtime.Symbol) CUP$include$stack.elementAt(CUP$include$top-2)).value;
		
	functions.add(new Function(id, params, type));

              CUP$include$result = parser.getSymbolFactory().newSymbol("PARTINC",1, ((java_cup.runtime.Symbol)CUP$include$stack.elementAt(CUP$include$top-5)), ((java_cup.runtime.Symbol)CUP$include$stack.peek()), RESULT);
            }
          return CUP$include$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTPARAMF ::= LISTPARAMF comma TYPE tid 
            {
              ListParams RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$include$stack.elementAt(CUP$include$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$include$stack.elementAt(CUP$include$top-3)).right;
		ListParams params = (ListParams)((java_cup.runtime.Symbol) CUP$include$stack.elementAt(CUP$include$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$include$stack.elementAt(CUP$include$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$include$stack.elementAt(CUP$include$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$include$stack.elementAt(CUP$include$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$include$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$include$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$include$stack.peek()).value;
		
	params.insertar(new Parametro(id, type));
	RESULT = params;

              CUP$include$result = parser.getSymbolFactory().newSymbol("LISTPARAMF",3, ((java_cup.runtime.Symbol)CUP$include$stack.elementAt(CUP$include$top-3)), ((java_cup.runtime.Symbol)CUP$include$stack.peek()), RESULT);
            }
          return CUP$include$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTPARAMF ::= TYPE tid 
            {
              ListParams RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$include$stack.elementAt(CUP$include$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$include$stack.elementAt(CUP$include$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$include$stack.elementAt(CUP$include$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$include$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$include$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$include$stack.peek()).value;
		
	ListParams params = new ListParams();
	params.insertar(new Parametro(id, type));
	
	RESULT = params;

              CUP$include$result = parser.getSymbolFactory().newSymbol("LISTPARAMF",3, ((java_cup.runtime.Symbol)CUP$include$stack.elementAt(CUP$include$top-1)), ((java_cup.runtime.Symbol)CUP$include$stack.peek()), RESULT);
            }
          return CUP$include$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTPARAMF ::= 
            {
              ListParams RESULT =null;

              CUP$include$result = parser.getSymbolFactory().newSymbol("LISTPARAMF",3, ((java_cup.runtime.Symbol)CUP$include$stack.peek()), RESULT);
            }
          return CUP$include$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TYPE ::= tvoid 
            {
              Type RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$include$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$include$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$include$stack.peek()).value;
		 RESULT =  new Type(EnumType.VOID, vleft); 
              CUP$include$result = parser.getSymbolFactory().newSymbol("TYPE",2, ((java_cup.runtime.Symbol)CUP$include$stack.peek()), ((java_cup.runtime.Symbol)CUP$include$stack.peek()), RESULT);
            }
          return CUP$include$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TYPE ::= tint 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$include$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$include$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$include$stack.peek()).value;
		 RESULT =  new Type(EnumType.INT, ileft); 
              CUP$include$result = parser.getSymbolFactory().newSymbol("TYPE",2, ((java_cup.runtime.Symbol)CUP$include$stack.peek()), ((java_cup.runtime.Symbol)CUP$include$stack.peek()), RESULT);
            }
          return CUP$include$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TYPE ::= tfloat 
            {
              Type RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$include$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$include$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$include$stack.peek()).value;
		 RESULT =  new Type(EnumType.FLOAT, fleft); 
              CUP$include$result = parser.getSymbolFactory().newSymbol("TYPE",2, ((java_cup.runtime.Symbol)CUP$include$stack.peek()), ((java_cup.runtime.Symbol)CUP$include$stack.peek()), RESULT);
            }
          return CUP$include$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$include$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$include$do_action(
    int                        CUP$include$act_num,
    java_cup.runtime.lr_parser CUP$include$parser,
    java.util.Stack            CUP$include$stack,
    int                        CUP$include$top)
    throws java.lang.Exception
    {
              return CUP$include$do_action_part00000000(
                               CUP$include$act_num,
                               CUP$include$parser,
                               CUP$include$stack,
                               CUP$include$top);
    }
}

}
