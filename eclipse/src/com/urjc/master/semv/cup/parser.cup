/********************************************************************/
/********************************************************************/
/*****          Autores: Ruben Morante Gonzalez                 *****/
/*****                   Francisco Javier                       *****/
/*****                   Jonathan                               *****/
/********************************************************************/
/********************************************************************/

package com.urjc.master.semv.cup;

import java_cup.runtime.Symbol;

import com.urjc.master.semv.types.Type;
import com.urjc.master.semv.ambito.Ambito;
import com.urjc.master.semv.commands.Command;
import com.urjc.master.semv.commands.Function;
import com.urjc.master.semv.commands.Variable;
import com.urjc.master.semv.enums.EnumType;
import com.urjc.master.semv.list.Lid;
import com.urjc.master.semv.list.ListParams;
import com.urjc.master.semv.types.TupleTypes;
import com.urjc.master.semv.includes.File;
import com.urjc.master.semv.includes.Include;
import com.urjc.master.semv.commands.Parametro;

parser code {:

	private Ambito root;
	private Ambito actual;

	/* Es un metodo que el cual se llama automaticamente al haber un error en la gramatica, 
	con el que informamos de la linea y la columna en el que se encuentra dicho error.*/
	
	@Override 
	public void syntax_error(Symbol s) { 
		int l = s.left + 1;
		int c = s.right + 1;
		report_error("El String: '" + s.value + "' ha producido un error en la linea " + l + ", columna " + c + ".\n", null);
	}
:};

action code {:
	
	private Ambito root = new Ambito();
	private Ambito actual = this.root;
	private Function function = null;
		
	private Type getTypeOperation(String op, Type type1, Type type2, int line) {		
		Type type = new Type();
		
		if (type1.isError() || type2.isError()) {
			return type;
		}
		
		if (type1.equals(type2)) {
			type = type1;
		} else {
			System.err.println("Line: " + line + " Incompatible types on " + op);			
		}
		return type;	
	}
	
	private Type getTypeCallFunction(String id, Lid lid, int line) {
		Function func = null;
		Command cmd = null;
		Type type = new Type();
			
		cmd = this.actual.buscaId(id);
		if (cmd == null && !(cmd instanceof Function)) {
			System.err.println("Line:" + line + " The function " + id + " not exist");
		} else {
			func = (Function) cmd;
			type = cmd.getTipo();
		}
		
		if (func != null && !type.isError()) {
			TupleTypes idTypes_1 = func.getListParamsTypes();
			TupleTypes idTypes_2 = this.actual.buscaIdsType(lid);
			
			boolean success = idTypes_1.compare(idTypes_2);
			if (!success) {
				func.usage(idTypes_1, idTypes_2, line);
				type.setError();
			}
		}
		return type;		
	}			
:};

/* TOKENS */

// terminals
terminal treturn;
terminal l_par;
terminal r_par;
terminal l_brace;
terminal r_brace;
terminal l_bracket;
terminal r_bracket;
terminal comma;
terminal semicolon;
terminal assig;
terminal add;
terminal sub;
terminal mul;
terminal div;
terminal tif;
terminal tthen;
terminal telse;
terminal tfor;
terminal twhile;
terminal tdo;
terminal tuntil;
terminal tnot;
terminal tand;
terminal tor;
terminal equals;
terminal less;
terminal greater;
terminal lessequal;
terminal greaterequal;

terminal include;
terminal String hfile;

terminal constint;
terminal constfloat;

terminal String tvoid;
terminal String tint;
terminal String tfloat;
terminal String tid;

// non terminals

non terminal Include INCLUDE;
non terminal File FILE;
non terminal PROGRAM;
non terminal PART;
non terminal TupleTypes BLQ;
non terminal TupleTypes SENTLIST;
non terminal Type SENT;
non terminal Type EXP;
non terminal Type EXPT;
non terminal Type FACTOR;
non terminal Type TYPE;
non terminal Lid LID;
non terminal ListParams LISTPARAM;
non terminal Command RESTPART;
non terminal LCOND;
non terminal LCONDT;
non terminal LCONDF;
non terminal COND;
non terminal OPR;
non terminal IF2;

/* GRAMMAR */
PROGRAM ::= INCLUDE PART PROGRAM | INCLUDE PART | PART PROGRAM | PART;

INCLUDE ::= FILE:file INCLUDE {:
	Include include = new Include(file);
	include.include(this.root);
:};

INCLUDE ::= FILE:file {:	
	Include include = new Include(file);
	include.include(this.root);
:};

FILE ::= include hfile:file semicolon {:
	RESULT = new File(file);
:};


PART ::= TYPE:type RESTPART:command {: 			
	if (function != null) {
		function.insertaTipo(type);		
		function.checkReturnType(type, typeleft + 1);
	}
	this.actual = this.root;
	function = null;
:};

RESTPART ::= tid:idLexema l_par LISTPARAM:list {:
	function = this.root.insertaIdFunction(idLexema);
		
	if (function != null) {
		this.actual = function.getAmbito();
		function.insertarParametros(list, listleft + 1);
	}
	
:} r_par BLQ:types {:
	if (function != null) {
		function.insertReturnTypes(types);
	}	
:};

RESTPART ::= tid:idLexema l_par tvoid {:
	function = this.root.insertaIdFunction(idLexema);
	
	if (function != null) {
		this.actual = function.getAmbito();
	}
	
:} r_par BLQ:types {:
	if (function != null) {
		function.insertReturnTypes(types);
	}
:};


LISTPARAM ::= LISTPARAM:listparams comma TYPE:type tid:id {: 
	listparams.insertar(new Parametro(id, type));
	RESULT = listparams;
:};

LISTPARAM ::= TYPE:type tid:id {: 
	ListParams listparams = new ListParams();

	listparams.insertar(new Parametro(id, type));
	RESULT = listparams;
:};

LISTPARAM ::= /* empty */;

BLQ ::= l_brace SENTLIST:types r_brace {: 	
	if (this.actual.getFather() != null) {
		this.actual = this.actual.getFather();
	} else {
		this.actual = this.root;
	}
	RESULT = types;
:};

SENTLIST ::= SENTLIST:types SENT:type {:
	types.insert(type);
	RESULT = types;
:};

SENTLIST ::= SENT:type {:
	TupleTypes types = new TupleTypes();
	types.insert(type);
	RESULT = types;
:};

// Declare id's...
SENT ::= TYPE:type LID:lid {: 
	for(String id : lid.getList()) {
		this.actual.insertaIdVariable(new Variable(id, type));
	}	
:} semicolon;


// Assign...
SENT ::= tid:idLexema assig EXP:typeExp semicolon {: 
	Type type = new Type();	
	Command cmd = this.actual.buscaId(idLexema);

	if (cmd == null) {
		System.err.println("Line:" + (idLexemaleft + 1) + "No existe el identificador de la asignacion ");
	} else if (!typeExp.isError()) {
		if (!cmd.dameTipo().equals(typeExp)) {
			System.err.println("Incompatible types on assign " + (idLexemaleft + 1));
			type.setError(); 
		}
	}
	RESULT = type;
:};

// Call procedure function...
SENT ::= tid:idLexema l_par LID:lid r_par semicolon {: 
	Type type = new Type();

	if (!getTypeCallFunction(idLexema, lid, lidleft + 1).isError()) {
		type.setVoid();
	}
	RESULT = type;
:};

// return....
SENT ::= treturn EXP:type semicolon {:
	type.setReturn();
	RESULT = type;
:};



SENT ::= tif l_par LCOND r_par tthen {:

	this.actual = new Ambito(this.actual);
	
:} BLQ IF2;

IF2 ::= telse {: 

	this.actual = new Ambito(this.actual);

:} BLQ | ;


// for...
SENT ::= tfor l_par tid assig EXP semicolon LCOND semicolon tid assig EXP r_par {:

	this.actual = new Ambito(this.actual);	

:} BLQ; 

// while ..
SENT ::= twhile l_par LCOND r_par {:

	this.actual = new Ambito(this.actual);

:} BLQ;

// do while...
SENT ::= tdo {:

	this.actual = new Ambito(this.actual);

:} BLQ tuntil l_par LCOND r_par;

// Bloque an√≥nimo...
SENT ::= {:

	this.actual = new Ambito(this.actual);

:} BLQ;

SENT ::= semicolon {:
	;
:};

LID ::= tid:id {: 

	Lid lid = new Lid();
	lid.add(id);
	RESULT = lid; 

:};

LID ::= tid:id comma LID:lid {:

	lid.add(id);
	RESULT = lid; 	

:}; // Devolver tipo de tid a LID...

LID ::= /* empty */;

EXP ::= EXP:type1 add EXPT:type2 {:
	RESULT = getTypeOperation("add", type1, type2, type1left + 1);
:};

EXP ::= EXP:type1 sub EXPT:type2 {:
	RESULT = getTypeOperation("sub", type1, type2, type1left + 1);
:};

EXP ::= EXPT:type {:	
	RESULT = type;
:};

EXPT ::= EXPT:type1 mul FACTOR:type2 {:
	RESULT = getTypeOperation("mul", type1, type2, type1left + 1);
:};

EXPT ::= EXPT:type1 div FACTOR:type2 {:
	RESULT = getTypeOperation("div", type1, type2, type1left + 1);
:};

EXPT ::= FACTOR:type {:	
	RESULT = type;
:};

FACTOR ::= tid:idLexema l_par LID:lid r_par {:
	RESULT = getTypeCallFunction(idLexema, lid, lidleft + 1);
:};

FACTOR ::= l_bracket EXP:type {:
	RESULT = type;
:} r_bracket;

FACTOR ::= tid:idLexema {:
	Command cmd = this.actual.buscaId(idLexema);
	Type type = new Type();
	
	if (cmd == null) {
		System.err.println("Line: " + (idLexemaleft + 1) + " The id " + idLexema + " not exist ");	
	} else {
		type = cmd.dameTipo();
	}
	RESULT = type;
:};

FACTOR ::= constint:v {:
	RESULT = new Type(EnumType.INT, vleft);
:};

FACTOR ::= constfloat:v {:
	RESULT = new Type(EnumType.FLOAT, vleft);
:};

TYPE ::= tvoid:v {: RESULT =  new Type(EnumType.VOID, vleft); :};
TYPE ::= tint:i {: RESULT =  new Type(EnumType.INT, ileft); :};
TYPE ::= tfloat:f {: RESULT =  new Type(EnumType.FLOAT, fleft); :};

LCOND ::= LCOND tor LCONDT;
LCOND ::= LCONDT;

LCONDT ::= LCONDT tand LCONDF;
LCONDT  ::=  LCONDF;

LCONDF ::= COND;
LCONDF ::= tnot COND;

COND ::= EXP:type1 OPR EXP:type2 {:
	RESULT = getTypeOperation("conditional expresion", type1, type2, type1left + 1);
:};

OPR ::=  equals;
OPR ::=  less;
OPR ::=  greater;
OPR ::=  greaterequal;
OPR ::=  lessequal;
