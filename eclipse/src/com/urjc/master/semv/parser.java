
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\023\002\000\002\015\010" +
    "\000\002\024\002\000\002\015\010\000\002\014\006\000" +
    "\002\014\004\000\002\025\002\000\002\004\006\000\002" +
    "\005\004\000\002\005\003\000\002\026\002\000\002\006" +
    "\006\000\002\006\006\000\002\006\007\000\002\006\005" +
    "\000\002\006\012\000\002\006\017\000\002\006\007\000" +
    "\002\006\010\000\002\006\003\000\002\013\003\000\002" +
    "\013\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\003\000\002\010\005\000\002\010\005\000\002\010\003" +
    "\000\002\011\006\000\002\011\005\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\016\005\000\002\016" +
    "\003\000\002\017\005\000\002\017\003\000\002\020\003" +
    "\000\002\020\004\000\002\021\005\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\010\045\006\046\005\047\004\001\002\000" +
    "\004\050\uffda\001\002\000\004\050\uffdb\001\002\000\004" +
    "\050\uffdc\001\002\000\012\002\uffff\045\006\046\005\047" +
    "\004\001\002\000\004\050\014\001\002\000\004\002\012" +
    "\001\002\000\004\002\000\001\002\000\012\002\ufffe\045" +
    "\ufffe\046\ufffe\047\ufffe\001\002\000\004\005\015\001\002" +
    "\000\010\045\017\046\005\047\004\001\002\000\006\006" +
    "\ufffd\013\162\001\002\000\006\006\022\050\uffdc\001\002" +
    "\000\004\050\021\001\002\000\006\006\ufff8\013\ufff8\001" +
    "\002\000\004\007\ufffb\001\002\000\004\007\024\001\002" +
    "\000\026\004\ufff7\007\ufff7\022\ufff7\025\ufff7\026\ufff7\027" +
    "\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\001\002\000\012" +
    "\002\ufffa\045\ufffa\046\ufffa\047\ufffa\001\002\000\026\004" +
    "\037\007\024\022\027\025\031\026\040\027\036\045\006" +
    "\046\005\047\004\050\030\001\002\000\004\005\153\001" +
    "\002\000\006\005\145\015\144\001\002\000\004\005\130" +
    "\001\002\000\030\004\uffea\007\uffea\010\uffea\022\uffea\025" +
    "\uffea\026\uffea\027\uffea\045\uffea\046\uffea\047\uffea\050\uffea" +
    "\001\002\000\030\004\037\007\024\010\127\022\027\025" +
    "\031\026\040\027\036\045\006\046\005\047\004\050\030" +
    "\001\002\000\030\004\ufff4\007\ufff4\010\ufff4\022\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4" +
    "\001\002\000\004\050\110\001\002\000\004\007\024\001" +
    "\002\000\012\011\052\043\045\044\042\050\044\001\002" +
    "\000\004\005\041\001\002\000\014\011\052\031\054\043" +
    "\045\044\042\050\044\001\002\000\036\006\uffdd\012\uffdd" +
    "\014\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\001\002" +
    "\000\012\006\uffd6\014\uffd6\032\uffd6\033\uffd6\001\002\000" +
    "\040\005\106\006\uffdf\012\uffdf\014\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\001\002\000\036\006\uffde\012\uffde" +
    "\014\uffde\016\uffde\017\uffde\020\uffde\021\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\001\002" +
    "\000\036\006\uffe2\012\uffe2\014\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2" +
    "\037\uffe2\040\uffe2\001\002\000\012\006\uffd5\014\uffd5\032" +
    "\uffd5\033\uffd5\001\002\000\012\006\uffd8\014\uffd8\032\062" +
    "\033\uffd8\001\002\000\036\006\uffe5\012\uffe5\014\uffe5\016" +
    "\uffe5\017\uffe5\020\076\021\077\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\001\002\000\012\011" +
    "\052\043\045\044\042\050\044\001\002\000\020\016\072" +
    "\017\067\034\070\035\065\036\073\037\071\040\074\001" +
    "\002\000\012\011\052\043\045\044\042\050\044\001\002" +
    "\000\006\006\057\033\056\001\002\000\014\011\052\031" +
    "\054\043\045\044\042\050\044\001\002\000\004\007\024" +
    "\001\002\000\030\004\uffec\007\uffec\010\uffec\022\uffec\025" +
    "\uffec\026\uffec\027\uffec\045\uffec\046\uffec\047\uffec\050\uffec" +
    "\001\002\000\012\006\uffd9\014\uffd9\032\062\033\uffd9\001" +
    "\002\000\014\011\052\031\054\043\045\044\042\050\044" +
    "\001\002\000\012\006\uffd7\014\uffd7\032\uffd7\033\uffd7\001" +
    "\002\000\012\006\uffd4\014\uffd4\032\uffd4\033\uffd4\001\002" +
    "\000\012\011\uffd1\043\uffd1\044\uffd1\050\uffd1\001\002\000" +
    "\012\011\052\043\045\044\042\050\044\001\002\000\012" +
    "\011\052\043\045\044\042\050\044\001\002\000\012\011" +
    "\uffd2\043\uffd2\044\uffd2\050\uffd2\001\002\000\012\011\uffce" +
    "\043\uffce\044\uffce\050\uffce\001\002\000\012\011\052\043" +
    "\045\044\042\050\044\001\002\000\012\011\uffd0\043\uffd0" +
    "\044\uffd0\050\uffd0\001\002\000\012\011\uffcf\043\uffcf\044" +
    "\uffcf\050\uffcf\001\002\000\036\006\uffe7\012\uffe7\014\uffe7" +
    "\016\uffe7\017\uffe7\020\076\021\077\032\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\001\002\000\012" +
    "\011\052\043\045\044\042\050\044\001\002\000\012\011" +
    "\052\043\045\044\042\050\044\001\002\000\036\006\uffe3" +
    "\012\uffe3\014\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\001\002\000\036\006\uffe4\012\uffe4\014\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\001\002\000\036\006\uffe6\012" +
    "\uffe6\014\uffe6\016\uffe6\017\uffe6\020\076\021\077\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\001" +
    "\002\000\016\006\uffd3\014\uffd3\016\072\017\067\032\uffd3" +
    "\033\uffd3\001\002\000\010\012\105\016\072\017\067\001" +
    "\002\000\036\006\uffe0\012\uffe0\014\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\001\002\000\004\050\110\001\002" +
    "\000\004\006\113\001\002\000\010\006\uffe9\013\111\014" +
    "\uffe9\001\002\000\004\050\110\001\002\000\006\006\uffe8" +
    "\014\uffe8\001\002\000\036\006\uffe1\012\uffe1\014\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\001\002\000\010\014" +
    "\115\016\072\017\067\001\002\000\030\004\uffef\007\uffef" +
    "\010\uffef\022\uffef\025\uffef\026\uffef\027\uffef\045\uffef\046" +
    "\uffef\047\uffef\050\uffef\001\002\000\004\030\117\001\002" +
    "\000\004\005\120\001\002\000\014\011\052\031\054\043" +
    "\045\044\042\050\044\001\002\000\006\006\122\033\056" +
    "\001\002\000\030\004\uffeb\007\uffeb\010\uffeb\022\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb" +
    "\001\002\000\004\014\ufff3\001\002\000\004\014\125\001" +
    "\002\000\030\004\ufff2\007\ufff2\010\ufff2\022\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\001" +
    "\002\000\030\004\ufff5\007\ufff5\010\ufff5\022\ufff5\025\ufff5" +
    "\026\ufff5\027\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\001" +
    "\002\000\036\002\ufff6\004\ufff6\007\ufff6\010\ufff6\022\ufff6" +
    "\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\045\ufff6\046" +
    "\ufff6\047\ufff6\050\ufff6\001\002\000\004\050\131\001\002" +
    "\000\004\015\132\001\002\000\012\011\052\043\045\044" +
    "\042\050\044\001\002\000\010\014\134\016\072\017\067" +
    "\001\002\000\014\011\052\031\054\043\045\044\042\050" +
    "\044\001\002\000\006\014\136\033\056\001\002\000\004" +
    "\050\137\001\002\000\004\015\140\001\002\000\012\011" +
    "\052\043\045\044\042\050\044\001\002\000\010\006\142" +
    "\016\072\017\067\001\002\000\004\007\024\001\002\000" +
    "\030\004\uffed\007\uffed\010\uffed\022\uffed\025\uffed\026\uffed" +
    "\027\uffed\045\uffed\046\uffed\047\uffed\050\uffed\001\002\000" +
    "\012\011\052\043\045\044\042\050\044\001\002\000\004" +
    "\050\110\001\002\000\004\006\147\001\002\000\004\014" +
    "\150\001\002\000\030\004\ufff0\007\ufff0\010\ufff0\022\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\045\ufff0\046\ufff0\047\ufff0\050" +
    "\ufff0\001\002\000\010\014\152\016\072\017\067\001\002" +
    "\000\030\004\ufff1\007\ufff1\010\ufff1\022\ufff1\025\ufff1\026" +
    "\ufff1\027\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\001\002" +
    "\000\014\011\052\031\054\043\045\044\042\050\044\001" +
    "\002\000\006\006\155\033\056\001\002\000\004\023\156" +
    "\001\002\000\004\007\024\001\002\000\004\024\160\001" +
    "\002\000\004\007\024\001\002\000\030\004\uffee\007\uffee" +
    "\010\uffee\022\uffee\025\uffee\026\uffee\027\uffee\045\uffee\046" +
    "\uffee\047\uffee\050\uffee\001\002\000\010\045\006\046\005" +
    "\047\004\001\002\000\004\006\164\001\002\000\004\007" +
    "\024\001\002\000\012\002\ufffc\045\ufffc\046\ufffc\047\ufffc" +
    "\001\002\000\004\050\167\001\002\000\006\006\ufff9\013" +
    "\ufff9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\010\002\010\003\006\012\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\167\003\006\012\007\001\001\000\004\015\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\017\014\015\001\001\000" +
    "\004\023\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\022\001\001\000\004\004" +
    "\024\001\001\000\004\025\025\001\001\000\002\001\001" +
    "\000\012\004\031\005\032\006\033\012\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\031\006\125\012\034\001\001\000" +
    "\002\001\001\000\004\013\122\001\001\000\004\004\115" +
    "\001\001\000\010\007\113\010\050\011\045\001\001\000" +
    "\002\001\001\000\020\007\052\010\050\011\045\016\054" +
    "\017\047\020\042\021\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\103\010\050\011\045\001\001\000\004" +
    "\022\065\001\001\000\012\007\052\010\050\011\045\021" +
    "\063\001\001\000\002\001\001\000\016\007\052\010\050" +
    "\011\045\017\060\020\042\021\046\001\001\000\004\004" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\007\052\010\050\011\045\020\062\021\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\102\010\050\011\045\001\001\000\006\010\101\011" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\074\011\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\100\001\001\000\004" +
    "\011\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\007\052\010\050" +
    "\011\045\016\120\017\047\020\042\021\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\132\010\050\011\045\001\001\000\002\001\001\000" +
    "\020\007\052\010\050\011\045\016\134\017\047\020\042" +
    "\021\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\140\010\050\011\045\001\001" +
    "\000\002\001\001\000\004\004\142\001\001\000\002\001" +
    "\001\000\010\007\150\010\050\011\045\001\001\000\004" +
    "\013\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\007\052\010\050\011\045\016\153\017\047\020\042\021" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\156\001\001\000\002\001\001\000\004\004\160\001" +
    "\001\000\002\001\001\000\004\012\165\001\001\000\002" +
    "\001\001\000\004\004\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private Ambito root;
	private Ambito actual;

	public Ambito getAmbitoRoot() {
		return this.root;
	}

	public Ambito setAmbitoRoot(Ambito ambito) {
		this.root = ambito;
	}

	public Ambito getAmbitoActual() {
		return this.actual;
	}

	public Ambito setAmbitoActual(Ambito ambito) {
		this.actual = ambito;
	}

	/*Es un método que el cual se llama automáticamente al haber un error en la gramática, 
	con el que informamos de la linea y la columna en el que se encuentra dicho error.*/
	@Override 
	public void syntax_error(Symbol s) { 
		int l = s.left + 1;
		int c = s.right + 1;
		report_error("\n   El String: '" + s.value + "' ha producido un error en la linea " + l + ", columna " + c + ".\n\n", null);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	private Ambito root = new Ambito();
	private Ambito actual = new Ambito();

	public Ambito getAmbitoRoot() {
		return this.root;
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= PART PROGRAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= PART 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PART ::= TYPE RESTPART 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("PART TYPE : " + type); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int idLexemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idLexemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idLexema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

 System.out.println("
 	RESTPART this.root.InsertaId(idLexema, APITS.EnumCommands.FUNCTION, this.root);
 	Function function = (Function) this.root.buscaId(idLexema);
 	function.insertarParametros(list));
 	this.setAmbitoActual(function.getAmbito());
 "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RESTPART ::= tid l_par LISTPARAM NT$0 r_par BLQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idLexemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idLexemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String idLexema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESTPART",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =null;
		int idLexemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idLexemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String idLexema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 
	System.out.println("
		RESTPART.void 
		this.root.InsertaId(idLexema, APITS.EnumCommands.FUNCTION, this.root);
		Function function = (Function) this.root.buscaId(idLexema);
		this.setAmbitoActual(function.getAmbito());
	"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RESTPART ::= tid l_par tvoid r_par NT$1 BLQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idLexemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idLexemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String idLexema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESTPART",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTPARAM ::= LISTPARAM comma TYPE tid 
            {
              Object RESULT =null;
		int listparamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listparamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object listparam = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	System.out.println("
		LISTPARAM TYPE comma: " + type +"
		listparam.insertar(id, type);
		RETURN = listparam;
	"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTPARAM ::= TYPE tid 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	System.out.println("
		LISTPARAM TYPE: " + type + "
		LISTPARAM listparam = new LISTPARAM();
		listparam.insertar(id, type);
		RETURN = listparam;
	"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT =null;
 System.out.println("NuevoEntorno"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BLQ ::= l_brace NT$2 SENTLIST r_brace 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
	System.out.println("
		Salir Entorno
		this.setAmbitoActual(this.getAmbitoActual().getFather());
	"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTLIST ::= SENTLIST SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTLIST ::= SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$3 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LID lid = (LID)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
	System.out.println("
		for(String id : lid.getList()) {
			this.actual.insertaId(type, id, APITS.EnumCommands.VARIABLE);
		}
	"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENT ::= TYPE LID NT$3 semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LID lid = (LID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENT ::= tid assig EXP semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= tid l_par LID r_par semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT ::= treturn EXP semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENT ::= tif l_par LCOND r_par tthen BLQ telse BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT ::= tfor l_par tid assig EXP semicolon LCOND semicolon tid assig EXP r_par BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENT ::= twhile l_par LCOND r_par BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENT ::= tdo BLQ tuntil l_par LCOND r_par 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENT ::= BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LID ::= tid 
            {
              LID RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	System.out.println("
		LID lid = LID();
		lid.add(id);
		RESULT = lid;  
	"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LID ::= tid comma LID 
            {
              LID RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LID lid = (LID)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	System.out.println("
		lid.add(id);
		RESULT = lid; 
	"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXP ::= EXP add EXPT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXP ::= EXP sub EXPT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXP ::= EXPT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPT ::= EXPT mul FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPT ::= EXPT div FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPT ::= FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FACTOR ::= tid l_par LID r_par 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FACTOR ::= l_bracket EXP r_bracket 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FACTOR ::= tid 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FACTOR ::= constint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FACTOR ::= constfloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TYPE ::= tvoid 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Type Void BLA : " + v); RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TYPE ::= tint 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Type  Int: BLA " + i); RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TYPE ::= tfloat 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Type  Float: BLA " + f); RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LCOND ::= LCOND tor LCONDT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LCOND ::= LCONDT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LCONDT ::= LCONDT tand LCONDF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCONDT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LCONDT ::= LCONDF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCONDT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LCONDF ::= COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCONDF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LCONDF ::= tnot COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCONDF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COND ::= EXP OPR EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPR ::= equals 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPR ::= less 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPR ::= greater 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPR ::= greaterequal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPR ::= lessequal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
