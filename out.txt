Warning : Terminal "include" was declared but never used
Warning : Terminal "tboolean" was declared but never used
Warning : Terminal "hfile" was declared but never used
Warning : *** Reduce/Reduce conflict found in state #20
  between NT$1 ::= (*) 
  and     NT$2 ::= (*) 
  under symbols: {treturn, l_brace, tif, tfor, twhile, tdo, tvoid, tint, tfloat, tid}
  Resolved in favor of the first production.

Warning : *** Reduce/Reduce conflict found in state #18
  between NT$1 ::= (*) 
  and     NT$2 ::= (*) 
  under symbols: {treturn, l_brace, tif, tfor, twhile, tdo, tvoid, tint, tfloat, tid}
  Resolved in favor of the first production.

Warning : *** Production "NT$2 ::= " never reduced
Error : *** More conflicts encountered than expected -- parser generation aborted
===== Terminals =====
[0]EOF [1]error [2]treturn [3]l_par [4]r_par 
[5]l_brace [6]r_brace [7]l_bracket [8]r_bracket [9]comma 
[10]semicolon [11]assig [12]add [13]sub [14]mul 
[15]div [16]tif [17]tthen [18]telse [19]tfor 
[20]twhile [21]tdo [22]tuntil [23]tnot [24]tand 
[25]tor [26]equals [27]less [28]greater [29]lessequal 
[30]greaterequal [31]include [32]hfile [33]constint [34]constfloat 
[35]tvoid [36]tint [37]tfloat [38]tboolean [39]tid 


===== Non terminals =====
[0]PROGRAM [1]PART [2]BLQ [3]SENTLIST [4]SENT 
[5]EXP [6]EXPT [7]FACTOR [8]TYPE [9]LID 
[10]LISTPARAM [11]RESTPART [12]LCOND [13]LCONDT [14]LCONDF 
[15]COND [16]OPR [17]NT$0 [18]NT$1 [19]NT$2 
[20]NT$3 

===== Productions =====
[0] PROGRAM ::= PART PROGRAM 
[1] $START ::= PROGRAM EOF 
[2] PROGRAM ::= PART 
[3] PART ::= TYPE RESTPART 
[4] RESTPART ::= tid l_par LISTPARAM r_par BLQ 
[5] RESTPART ::= tid l_par tvoid r_par BLQ 
[6] LISTPARAM ::= LISTPARAM comma TYPE tid 
[7] LISTPARAM ::= TYPE tid 
[8] NT$0 ::= 
[9] BLQ ::= l_brace NT$0 SENTLIST r_brace 
[10] NT$1 ::= 
[11] SENTLIST ::= NT$1 SENTLIST SENT 
[12] NT$2 ::= 
[13] SENTLIST ::= NT$2 SENT 
[14] NT$3 ::= 
[15] SENT ::= TYPE LID NT$3 semicolon 
[16] SENT ::= tid assig EXP semicolon 
[17] SENT ::= tid l_par LID r_par semicolon 
[18] SENT ::= treturn EXP semicolon 
[19] SENT ::= tif l_par LCOND r_par tthen BLQ telse BLQ 
[20] SENT ::= tfor l_par tid assig EXP semicolon LCOND semicolon tid assig EXP r_par BLQ 
[21] SENT ::= twhile l_par LCOND r_par BLQ 
[22] SENT ::= tdo BLQ tuntil l_par LCOND r_par 
[23] SENT ::= BLQ 
[24] LID ::= tid 
[25] LID ::= tid comma LID 
[26] EXP ::= EXP add EXPT 
[27] EXP ::= EXP sub EXPT 
[28] EXP ::= EXPT 
[29] EXPT ::= EXPT mul FACTOR 
[30] EXPT ::= EXPT div FACTOR 
[31] EXPT ::= FACTOR 
[32] FACTOR ::= tid l_par LID r_par 
[33] FACTOR ::= l_bracket EXP r_bracket 
[34] FACTOR ::= tid 
[35] FACTOR ::= constint 
[36] FACTOR ::= constfloat 
[37] TYPE ::= tvoid 
[38] TYPE ::= tint 
[39] TYPE ::= tfloat 
[40] LCOND ::= LCOND tor LCONDT 
[41] LCOND ::= LCONDT 
[42] LCONDT ::= LCONDT tand LCONDF 
[43] LCONDT ::= LCONDF 
[44] LCONDF ::= COND 
[45] LCONDF ::= tnot COND 
[46] COND ::= EXP OPR EXP 
[47] OPR ::= equals 
[48] OPR ::= less 
[49] OPR ::= greater 
[50] OPR ::= greaterequal 
[51] OPR ::= lessequal 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [TYPE ::= (*) tint , {tid }]
  [PROGRAM ::= (*) PART , {EOF }]
  [TYPE ::= (*) tvoid , {tid }]
  [$START ::= (*) PROGRAM EOF , {EOF }]
  [TYPE ::= (*) tfloat , {tid }]
  [PART ::= (*) TYPE RESTPART , {EOF tvoid tint tfloat }]
  [PROGRAM ::= (*) PART PROGRAM , {EOF }]
}
transition on PROGRAM to state [6]
transition on TYPE to state [5]
transition on PART to state [4]
transition on tvoid to state [3]
transition on tint to state [2]
transition on tfloat to state [1]

-------------------
lalr_state [1]: {
  [TYPE ::= tfloat (*) , {tid }]
}

-------------------
lalr_state [2]: {
  [TYPE ::= tint (*) , {tid }]
}

-------------------
lalr_state [3]: {
  [TYPE ::= tvoid (*) , {tid }]
}

-------------------
lalr_state [4]: {
  [TYPE ::= (*) tint , {tid }]
  [PROGRAM ::= PART (*) , {EOF }]
  [PROGRAM ::= (*) PART , {EOF }]
  [TYPE ::= (*) tvoid , {tid }]
  [TYPE ::= (*) tfloat , {tid }]
  [PART ::= (*) TYPE RESTPART , {EOF tvoid tint tfloat }]
  [PROGRAM ::= PART (*) PROGRAM , {EOF }]
  [PROGRAM ::= (*) PART PROGRAM , {EOF }]
}
transition on TYPE to state [5]
transition on PROGRAM to state [118]
transition on PART to state [4]
transition on tvoid to state [3]
transition on tint to state [2]
transition on tfloat to state [1]

-------------------
lalr_state [5]: {
  [RESTPART ::= (*) tid l_par tvoid r_par BLQ , {EOF tvoid tint tfloat }]
  [RESTPART ::= (*) tid l_par LISTPARAM r_par BLQ , {EOF tvoid tint tfloat }]
  [PART ::= TYPE (*) RESTPART , {EOF tvoid tint tfloat }]
}
transition on tid to state [9]
transition on RESTPART to state [8]

-------------------
lalr_state [6]: {
  [$START ::= PROGRAM (*) EOF , {EOF }]
}
transition on EOF to state [7]

-------------------
lalr_state [7]: {
  [$START ::= PROGRAM EOF (*) , {EOF }]
}

-------------------
lalr_state [8]: {
  [PART ::= TYPE RESTPART (*) , {EOF tvoid tint tfloat }]
}

-------------------
lalr_state [9]: {
  [RESTPART ::= tid (*) l_par tvoid r_par BLQ , {EOF tvoid tint tfloat }]
  [RESTPART ::= tid (*) l_par LISTPARAM r_par BLQ , {EOF tvoid tint tfloat }]
}
transition on l_par to state [10]

-------------------
lalr_state [10]: {
  [TYPE ::= (*) tint , {tid }]
  [RESTPART ::= tid l_par (*) LISTPARAM r_par BLQ , {EOF tvoid tint tfloat }]
  [LISTPARAM ::= (*) TYPE tid , {r_par comma }]
  [TYPE ::= (*) tvoid , {tid }]
  [TYPE ::= (*) tfloat , {tid }]
  [LISTPARAM ::= (*) LISTPARAM comma TYPE tid , {r_par comma }]
  [RESTPART ::= tid l_par (*) tvoid r_par BLQ , {EOF tvoid tint tfloat }]
}
transition on TYPE to state [13]
transition on tvoid to state [12]
transition on tint to state [2]
transition on tfloat to state [1]
transition on LISTPARAM to state [11]

-------------------
lalr_state [11]: {
  [RESTPART ::= tid l_par LISTPARAM (*) r_par BLQ , {EOF tvoid tint tfloat }]
  [LISTPARAM ::= LISTPARAM (*) comma TYPE tid , {r_par comma }]
}
transition on r_par to state [114]
transition on comma to state [113]

-------------------
lalr_state [12]: {
  [TYPE ::= tvoid (*) , {tid }]
  [RESTPART ::= tid l_par tvoid (*) r_par BLQ , {EOF tvoid tint tfloat }]
}
transition on r_par to state [15]

-------------------
lalr_state [13]: {
  [LISTPARAM ::= TYPE (*) tid , {r_par comma }]
}
transition on tid to state [14]

-------------------
lalr_state [14]: {
  [LISTPARAM ::= TYPE tid (*) , {r_par comma }]
}

-------------------
lalr_state [15]: {
  [BLQ ::= (*) l_brace NT$0 SENTLIST r_brace , {EOF tvoid tint tfloat }]
  [RESTPART ::= tid l_par tvoid r_par (*) BLQ , {EOF tvoid tint tfloat }]
}
transition on BLQ to state [17]
transition on l_brace to state [16]

-------------------
lalr_state [16]: {
  [NT$0 ::= (*) , {treturn l_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [BLQ ::= l_brace (*) NT$0 SENTLIST r_brace , {EOF treturn l_brace r_brace tif telse tfor twhile tdo tuntil tvoid tint tfloat tid }]
}
transition on NT$0 to state [18]

-------------------
lalr_state [17]: {
  [RESTPART ::= tid l_par tvoid r_par BLQ (*) , {EOF tvoid tint tfloat }]
}

-------------------
lalr_state [18]: {
  [SENTLIST ::= (*) NT$2 SENT , {r_brace }]
  [NT$1 ::= (*) , {treturn l_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [BLQ ::= l_brace NT$0 (*) SENTLIST r_brace , {EOF treturn l_brace r_brace tif telse tfor twhile tdo tuntil tvoid tint tfloat tid }]
  [NT$2 ::= (*) , {treturn l_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [SENTLIST ::= (*) NT$1 SENTLIST SENT , {r_brace }]
}
transition on SENTLIST to state [21]
transition on NT$1 to state [20]
transition on NT$2 to state [19]

-------------------
lalr_state [19]: {
  [SENT ::= (*) tfor l_par tid assig EXP semicolon LCOND semicolon tid assig EXP r_par BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [SENT ::= (*) tid l_par LID r_par semicolon , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [TYPE ::= (*) tvoid , {tid }]
  [SENT ::= (*) tdo BLQ tuntil l_par LCOND r_par , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [SENT ::= (*) tif l_par LCOND r_par tthen BLQ telse BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [TYPE ::= (*) tfloat , {tid }]
  [SENT ::= (*) tid assig EXP semicolon , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [SENTLIST ::= NT$2 (*) SENT , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [SENT ::= (*) twhile l_par LCOND r_par BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [SENT ::= (*) treturn EXP semicolon , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [TYPE ::= (*) tint , {tid }]
  [SENT ::= (*) TYPE LID NT$3 semicolon , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [BLQ ::= (*) l_brace NT$0 SENTLIST r_brace , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [SENT ::= (*) BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on twhile to state [32]
transition on tfloat to state [1]
transition on treturn to state [31]
transition on tdo to state [30]
transition on TYPE to state [29]
transition on l_brace to state [16]
transition on SENT to state [112]
transition on tvoid to state [3]
transition on BLQ to state [27]
transition on tfor to state [26]
transition on tid to state [25]
transition on tif to state [24]
transition on tint to state [2]

-------------------
lalr_state [20]: {
  [SENTLIST ::= (*) NT$2 SENT , {treturn l_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [NT$1 ::= (*) , {treturn l_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [NT$2 ::= (*) , {treturn l_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [SENTLIST ::= NT$1 (*) SENTLIST SENT , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [SENTLIST ::= (*) NT$1 SENTLIST SENT , {treturn l_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on SENTLIST to state [23]
transition on NT$1 to state [20]
transition on NT$2 to state [19]

-------------------
lalr_state [21]: {
  [BLQ ::= l_brace NT$0 SENTLIST (*) r_brace , {EOF treturn l_brace r_brace tif telse tfor twhile tdo tuntil tvoid tint tfloat tid }]
}
transition on r_brace to state [22]

-------------------
lalr_state [22]: {
  [BLQ ::= l_brace NT$0 SENTLIST r_brace (*) , {EOF treturn l_brace r_brace tif telse tfor twhile tdo tuntil tvoid tint tfloat tid }]
}

-------------------
lalr_state [23]: {
  [SENT ::= (*) tfor l_par tid assig EXP semicolon LCOND semicolon tid assig EXP r_par BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [SENTLIST ::= NT$1 SENTLIST (*) SENT , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [SENT ::= (*) tid l_par LID r_par semicolon , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [TYPE ::= (*) tvoid , {tid }]
  [SENT ::= (*) tdo BLQ tuntil l_par LCOND r_par , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [SENT ::= (*) tif l_par LCOND r_par tthen BLQ telse BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [TYPE ::= (*) tfloat , {tid }]
  [SENT ::= (*) tid assig EXP semicolon , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [SENT ::= (*) twhile l_par LCOND r_par BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [SENT ::= (*) treturn EXP semicolon , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [TYPE ::= (*) tint , {tid }]
  [SENT ::= (*) TYPE LID NT$3 semicolon , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [BLQ ::= (*) l_brace NT$0 SENTLIST r_brace , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [SENT ::= (*) BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on twhile to state [32]
transition on tfloat to state [1]
transition on treturn to state [31]
transition on tdo to state [30]
transition on TYPE to state [29]
transition on l_brace to state [16]
transition on SENT to state [28]
transition on tvoid to state [3]
transition on BLQ to state [27]
transition on tfor to state [26]
transition on tid to state [25]
transition on tif to state [24]
transition on tint to state [2]

-------------------
lalr_state [24]: {
  [SENT ::= tif (*) l_par LCOND r_par tthen BLQ telse BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on l_par to state [105]

-------------------
lalr_state [25]: {
  [SENT ::= tid (*) assig EXP semicolon , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [SENT ::= tid (*) l_par LID r_par semicolon , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on l_par to state [99]
transition on assig to state [98]

-------------------
lalr_state [26]: {
  [SENT ::= tfor (*) l_par tid assig EXP semicolon LCOND semicolon tid assig EXP r_par BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on l_par to state [86]

-------------------
lalr_state [27]: {
  [SENT ::= BLQ (*) , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}

-------------------
lalr_state [28]: {
  [SENTLIST ::= NT$1 SENTLIST SENT (*) , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}

-------------------
lalr_state [29]: {
  [LID ::= (*) tid , {semicolon }]
  [SENT ::= TYPE (*) LID NT$3 semicolon , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [LID ::= (*) tid comma LID , {semicolon }]
}
transition on tid to state [72]
transition on LID to state [83]

-------------------
lalr_state [30]: {
  [BLQ ::= (*) l_brace NT$0 SENTLIST r_brace , {tuntil }]
  [SENT ::= tdo (*) BLQ tuntil l_par LCOND r_par , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on BLQ to state [78]
transition on l_brace to state [16]

-------------------
lalr_state [31]: {
  [FACTOR ::= (*) tid , {semicolon add sub mul div }]
  [EXPT ::= (*) FACTOR , {semicolon add sub mul div }]
  [EXP ::= (*) EXPT , {semicolon add sub }]
  [FACTOR ::= (*) constfloat , {semicolon add sub mul div }]
  [FACTOR ::= (*) l_bracket EXP r_bracket , {semicolon add sub mul div }]
  [EXPT ::= (*) EXPT div FACTOR , {semicolon add sub mul div }]
  [EXP ::= (*) EXP sub EXPT , {semicolon add sub }]
  [SENT ::= treturn (*) EXP semicolon , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [FACTOR ::= (*) constint , {semicolon add sub mul div }]
  [FACTOR ::= (*) tid l_par LID r_par , {semicolon add sub mul div }]
  [EXPT ::= (*) EXPT mul FACTOR , {semicolon add sub mul div }]
  [EXP ::= (*) EXP add EXPT , {semicolon add sub }]
}
transition on l_bracket to state [42]
transition on tid to state [36]
transition on constfloat to state [34]
transition on EXP to state [76]
transition on constint to state [37]
transition on FACTOR to state [38]
transition on EXPT to state [41]

-------------------
lalr_state [32]: {
  [SENT ::= twhile (*) l_par LCOND r_par BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on l_par to state [33]

-------------------
lalr_state [33]: {
  [EXPT ::= (*) EXPT div FACTOR , {add sub mul div equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) constint , {add sub mul div equals less greater lessequal greaterequal }]
  [LCOND ::= (*) LCOND tor LCONDT , {r_par tor }]
  [LCONDF ::= (*) tnot COND , {r_par tand tor }]
  [EXP ::= (*) EXPT , {add sub equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) l_bracket EXP r_bracket , {add sub mul div equals less greater lessequal greaterequal }]
  [LCONDT ::= (*) LCONDF , {r_par tand tor }]
  [SENT ::= twhile l_par (*) LCOND r_par BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [EXP ::= (*) EXP add EXPT , {add sub equals less greater lessequal greaterequal }]
  [EXPT ::= (*) FACTOR , {add sub mul div equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) constfloat , {add sub mul div equals less greater lessequal greaterequal }]
  [LCOND ::= (*) LCONDT , {r_par tor }]
  [COND ::= (*) EXP OPR EXP , {r_par tand tor }]
  [EXPT ::= (*) EXPT mul FACTOR , {add sub mul div equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) tid , {add sub mul div equals less greater lessequal greaterequal }]
  [LCONDF ::= (*) COND , {r_par tand tor }]
  [EXP ::= (*) EXP sub EXPT , {add sub equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) tid l_par LID r_par , {add sub mul div equals less greater lessequal greaterequal }]
  [LCONDT ::= (*) LCONDT tand LCONDF , {r_par tand tor }]
}
transition on LCOND to state [45]
transition on tnot to state [44]
transition on EXP to state [43]
transition on l_bracket to state [42]
transition on EXPT to state [41]
transition on LCONDT to state [40]
transition on COND to state [39]
transition on FACTOR to state [38]
transition on constint to state [37]
transition on tid to state [36]
transition on LCONDF to state [35]
transition on constfloat to state [34]

-------------------
lalr_state [34]: {
  [FACTOR ::= constfloat (*) , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
}

-------------------
lalr_state [35]: {
  [LCONDT ::= LCONDF (*) , {r_par semicolon tand tor }]
}

-------------------
lalr_state [36]: {
  [FACTOR ::= tid (*) l_par LID r_par , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [FACTOR ::= tid (*) , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
}
transition on l_par to state [70]

-------------------
lalr_state [37]: {
  [FACTOR ::= constint (*) , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
}

-------------------
lalr_state [38]: {
  [EXPT ::= FACTOR (*) , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
}

-------------------
lalr_state [39]: {
  [LCONDF ::= COND (*) , {r_par semicolon tand tor }]
}

-------------------
lalr_state [40]: {
  [LCONDT ::= LCONDT (*) tand LCONDF , {r_par semicolon tand tor }]
  [LCOND ::= LCONDT (*) , {r_par semicolon tor }]
}
transition on tand to state [50]

-------------------
lalr_state [41]: {
  [EXPT ::= EXPT (*) mul FACTOR , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [EXP ::= EXPT (*) , {r_par r_bracket semicolon add sub tand tor equals less greater lessequal greaterequal }]
  [EXPT ::= EXPT (*) div FACTOR , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
}
transition on div to state [63]
transition on mul to state [62]

-------------------
lalr_state [42]: {
  [FACTOR ::= (*) tid , {r_bracket add sub mul div }]
  [EXPT ::= (*) FACTOR , {r_bracket add sub mul div }]
  [EXP ::= (*) EXPT , {r_bracket add sub }]
  [FACTOR ::= (*) constfloat , {r_bracket add sub mul div }]
  [FACTOR ::= l_bracket (*) EXP r_bracket , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) l_bracket EXP r_bracket , {r_bracket add sub mul div }]
  [EXPT ::= (*) EXPT div FACTOR , {r_bracket add sub mul div }]
  [EXP ::= (*) EXP sub EXPT , {r_bracket add sub }]
  [FACTOR ::= (*) constint , {r_bracket add sub mul div }]
  [FACTOR ::= (*) tid l_par LID r_par , {r_bracket add sub mul div }]
  [EXPT ::= (*) EXPT mul FACTOR , {r_bracket add sub mul div }]
  [EXP ::= (*) EXP add EXPT , {r_bracket add sub }]
}
transition on l_bracket to state [42]
transition on tid to state [36]
transition on constfloat to state [34]
transition on EXP to state [68]
transition on constint to state [37]
transition on FACTOR to state [38]
transition on EXPT to state [41]

-------------------
lalr_state [43]: {
  [EXP ::= EXP (*) sub EXPT , {add sub equals less greater lessequal greaterequal }]
  [OPR ::= (*) greater , {l_bracket constint constfloat tid }]
  [COND ::= EXP (*) OPR EXP , {r_par semicolon tand tor }]
  [OPR ::= (*) lessequal , {l_bracket constint constfloat tid }]
  [EXP ::= EXP (*) add EXPT , {add sub equals less greater lessequal greaterequal }]
  [OPR ::= (*) less , {l_bracket constint constfloat tid }]
  [OPR ::= (*) greaterequal , {l_bracket constint constfloat tid }]
  [OPR ::= (*) equals , {l_bracket constint constfloat tid }]
}
transition on greaterequal to state [60]
transition on greater to state [59]
transition on add to state [58]
transition on lessequal to state [57]
transition on equals to state [56]
transition on sub to state [55]
transition on OPR to state [54]
transition on less to state [53]

-------------------
lalr_state [44]: {
  [FACTOR ::= (*) tid , {add sub mul div equals less greater lessequal greaterequal }]
  [EXPT ::= (*) FACTOR , {add sub mul div equals less greater lessequal greaterequal }]
  [EXP ::= (*) EXPT , {add sub equals less greater lessequal greaterequal }]
  [LCONDF ::= tnot (*) COND , {r_par semicolon tand tor }]
  [FACTOR ::= (*) constfloat , {add sub mul div equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) l_bracket EXP r_bracket , {add sub mul div equals less greater lessequal greaterequal }]
  [EXPT ::= (*) EXPT div FACTOR , {add sub mul div equals less greater lessequal greaterequal }]
  [EXP ::= (*) EXP sub EXPT , {add sub equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) constint , {add sub mul div equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) tid l_par LID r_par , {add sub mul div equals less greater lessequal greaterequal }]
  [EXPT ::= (*) EXPT mul FACTOR , {add sub mul div equals less greater lessequal greaterequal }]
  [EXP ::= (*) EXP add EXPT , {add sub equals less greater lessequal greaterequal }]
  [COND ::= (*) EXP OPR EXP , {r_par semicolon tand tor }]
}
transition on COND to state [52]
transition on l_bracket to state [42]
transition on tid to state [36]
transition on constfloat to state [34]
transition on EXP to state [43]
transition on constint to state [37]
transition on FACTOR to state [38]
transition on EXPT to state [41]

-------------------
lalr_state [45]: {
  [SENT ::= twhile l_par LCOND (*) r_par BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [LCOND ::= LCOND (*) tor LCONDT , {r_par tor }]
}
transition on r_par to state [47]
transition on tor to state [46]

-------------------
lalr_state [46]: {
  [LCONDT ::= (*) LCONDF , {r_par semicolon tand tor }]
  [FACTOR ::= (*) tid , {add sub mul div equals less greater lessequal greaterequal }]
  [EXPT ::= (*) FACTOR , {add sub mul div equals less greater lessequal greaterequal }]
  [EXP ::= (*) EXPT , {add sub equals less greater lessequal greaterequal }]
  [LCONDF ::= (*) tnot COND , {r_par semicolon tand tor }]
  [LCONDT ::= (*) LCONDT tand LCONDF , {r_par semicolon tand tor }]
  [FACTOR ::= (*) constfloat , {add sub mul div equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) l_bracket EXP r_bracket , {add sub mul div equals less greater lessequal greaterequal }]
  [EXPT ::= (*) EXPT div FACTOR , {add sub mul div equals less greater lessequal greaterequal }]
  [EXP ::= (*) EXP sub EXPT , {add sub equals less greater lessequal greaterequal }]
  [LCONDF ::= (*) COND , {r_par semicolon tand tor }]
  [FACTOR ::= (*) constint , {add sub mul div equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) tid l_par LID r_par , {add sub mul div equals less greater lessequal greaterequal }]
  [EXPT ::= (*) EXPT mul FACTOR , {add sub mul div equals less greater lessequal greaterequal }]
  [EXP ::= (*) EXP add EXPT , {add sub equals less greater lessequal greaterequal }]
  [LCOND ::= LCOND tor (*) LCONDT , {r_par semicolon tor }]
  [COND ::= (*) EXP OPR EXP , {r_par semicolon tand tor }]
}
transition on tnot to state [44]
transition on EXP to state [43]
transition on l_bracket to state [42]
transition on EXPT to state [41]
transition on LCONDT to state [49]
transition on COND to state [39]
transition on FACTOR to state [38]
transition on constint to state [37]
transition on tid to state [36]
transition on LCONDF to state [35]
transition on constfloat to state [34]

-------------------
lalr_state [47]: {
  [BLQ ::= (*) l_brace NT$0 SENTLIST r_brace , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [SENT ::= twhile l_par LCOND r_par (*) BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on BLQ to state [48]
transition on l_brace to state [16]

-------------------
lalr_state [48]: {
  [SENT ::= twhile l_par LCOND r_par BLQ (*) , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}

-------------------
lalr_state [49]: {
  [LCOND ::= LCOND tor LCONDT (*) , {r_par semicolon tor }]
  [LCONDT ::= LCONDT (*) tand LCONDF , {r_par semicolon tand tor }]
}
transition on tand to state [50]

-------------------
lalr_state [50]: {
  [FACTOR ::= (*) tid , {add sub mul div equals less greater lessequal greaterequal }]
  [EXPT ::= (*) FACTOR , {add sub mul div equals less greater lessequal greaterequal }]
  [EXP ::= (*) EXPT , {add sub equals less greater lessequal greaterequal }]
  [LCONDT ::= LCONDT tand (*) LCONDF , {r_par semicolon tand tor }]
  [LCONDF ::= (*) tnot COND , {r_par semicolon tand tor }]
  [FACTOR ::= (*) constfloat , {add sub mul div equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) l_bracket EXP r_bracket , {add sub mul div equals less greater lessequal greaterequal }]
  [EXPT ::= (*) EXPT div FACTOR , {add sub mul div equals less greater lessequal greaterequal }]
  [EXP ::= (*) EXP sub EXPT , {add sub equals less greater lessequal greaterequal }]
  [LCONDF ::= (*) COND , {r_par semicolon tand tor }]
  [FACTOR ::= (*) constint , {add sub mul div equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) tid l_par LID r_par , {add sub mul div equals less greater lessequal greaterequal }]
  [EXPT ::= (*) EXPT mul FACTOR , {add sub mul div equals less greater lessequal greaterequal }]
  [EXP ::= (*) EXP add EXPT , {add sub equals less greater lessequal greaterequal }]
  [COND ::= (*) EXP OPR EXP , {r_par semicolon tand tor }]
}
transition on tnot to state [44]
transition on EXP to state [43]
transition on l_bracket to state [42]
transition on EXPT to state [41]
transition on COND to state [39]
transition on FACTOR to state [38]
transition on constint to state [37]
transition on tid to state [36]
transition on LCONDF to state [51]
transition on constfloat to state [34]

-------------------
lalr_state [51]: {
  [LCONDT ::= LCONDT tand LCONDF (*) , {r_par semicolon tand tor }]
}

-------------------
lalr_state [52]: {
  [LCONDF ::= tnot COND (*) , {r_par semicolon tand tor }]
}

-------------------
lalr_state [53]: {
  [OPR ::= less (*) , {l_bracket constint constfloat tid }]
}

-------------------
lalr_state [54]: {
  [FACTOR ::= (*) tid , {r_par semicolon add sub mul div tand tor }]
  [EXPT ::= (*) FACTOR , {r_par semicolon add sub mul div tand tor }]
  [EXP ::= (*) EXPT , {r_par semicolon add sub tand tor }]
  [FACTOR ::= (*) constfloat , {r_par semicolon add sub mul div tand tor }]
  [FACTOR ::= (*) l_bracket EXP r_bracket , {r_par semicolon add sub mul div tand tor }]
  [EXPT ::= (*) EXPT div FACTOR , {r_par semicolon add sub mul div tand tor }]
  [EXP ::= (*) EXP sub EXPT , {r_par semicolon add sub tand tor }]
  [FACTOR ::= (*) constint , {r_par semicolon add sub mul div tand tor }]
  [FACTOR ::= (*) tid l_par LID r_par , {r_par semicolon add sub mul div tand tor }]
  [EXPT ::= (*) EXPT mul FACTOR , {r_par semicolon add sub mul div tand tor }]
  [COND ::= EXP OPR (*) EXP , {r_par semicolon tand tor }]
  [EXP ::= (*) EXP add EXPT , {r_par semicolon add sub tand tor }]
}
transition on l_bracket to state [42]
transition on tid to state [36]
transition on constfloat to state [34]
transition on EXP to state [67]
transition on constint to state [37]
transition on FACTOR to state [38]
transition on EXPT to state [41]

-------------------
lalr_state [55]: {
  [FACTOR ::= (*) tid , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [EXPT ::= (*) FACTOR , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) constfloat , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) l_bracket EXP r_bracket , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [EXP ::= EXP sub (*) EXPT , {r_par r_bracket semicolon add sub tand tor equals less greater lessequal greaterequal }]
  [EXPT ::= (*) EXPT div FACTOR , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) constint , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) tid l_par LID r_par , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [EXPT ::= (*) EXPT mul FACTOR , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
}
transition on l_bracket to state [42]
transition on tid to state [36]
transition on constfloat to state [34]
transition on constint to state [37]
transition on FACTOR to state [38]
transition on EXPT to state [66]

-------------------
lalr_state [56]: {
  [OPR ::= equals (*) , {l_bracket constint constfloat tid }]
}

-------------------
lalr_state [57]: {
  [OPR ::= lessequal (*) , {l_bracket constint constfloat tid }]
}

-------------------
lalr_state [58]: {
  [FACTOR ::= (*) tid , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [EXPT ::= (*) FACTOR , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) constfloat , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) l_bracket EXP r_bracket , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [EXPT ::= (*) EXPT div FACTOR , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) constint , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [EXP ::= EXP add (*) EXPT , {r_par r_bracket semicolon add sub tand tor equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) tid l_par LID r_par , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [EXPT ::= (*) EXPT mul FACTOR , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
}
transition on l_bracket to state [42]
transition on tid to state [36]
transition on constfloat to state [34]
transition on constint to state [37]
transition on FACTOR to state [38]
transition on EXPT to state [61]

-------------------
lalr_state [59]: {
  [OPR ::= greater (*) , {l_bracket constint constfloat tid }]
}

-------------------
lalr_state [60]: {
  [OPR ::= greaterequal (*) , {l_bracket constint constfloat tid }]
}

-------------------
lalr_state [61]: {
  [EXP ::= EXP add EXPT (*) , {r_par r_bracket semicolon add sub tand tor equals less greater lessequal greaterequal }]
  [EXPT ::= EXPT (*) mul FACTOR , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [EXPT ::= EXPT (*) div FACTOR , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
}
transition on div to state [63]
transition on mul to state [62]

-------------------
lalr_state [62]: {
  [FACTOR ::= (*) constint , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [EXPT ::= EXPT mul (*) FACTOR , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) tid l_par LID r_par , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) tid , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) constfloat , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) l_bracket EXP r_bracket , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
}
transition on l_bracket to state [42]
transition on tid to state [36]
transition on constfloat to state [34]
transition on constint to state [37]
transition on FACTOR to state [65]

-------------------
lalr_state [63]: {
  [FACTOR ::= (*) constint , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) tid l_par LID r_par , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) tid , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) constfloat , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [EXPT ::= EXPT div (*) FACTOR , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) l_bracket EXP r_bracket , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
}
transition on l_bracket to state [42]
transition on tid to state [36]
transition on constfloat to state [34]
transition on constint to state [37]
transition on FACTOR to state [64]

-------------------
lalr_state [64]: {
  [EXPT ::= EXPT div FACTOR (*) , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
}

-------------------
lalr_state [65]: {
  [EXPT ::= EXPT mul FACTOR (*) , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
}

-------------------
lalr_state [66]: {
  [EXPT ::= EXPT (*) mul FACTOR , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [EXP ::= EXP sub EXPT (*) , {r_par r_bracket semicolon add sub tand tor equals less greater lessequal greaterequal }]
  [EXPT ::= EXPT (*) div FACTOR , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
}
transition on div to state [63]
transition on mul to state [62]

-------------------
lalr_state [67]: {
  [EXP ::= EXP (*) sub EXPT , {r_par semicolon add sub tand tor }]
  [EXP ::= EXP (*) add EXPT , {r_par semicolon add sub tand tor }]
  [COND ::= EXP OPR EXP (*) , {r_par semicolon tand tor }]
}
transition on add to state [58]
transition on sub to state [55]

-------------------
lalr_state [68]: {
  [EXP ::= EXP (*) sub EXPT , {r_bracket add sub }]
  [EXP ::= EXP (*) add EXPT , {r_bracket add sub }]
  [FACTOR ::= l_bracket EXP (*) r_bracket , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
}
transition on add to state [58]
transition on sub to state [55]
transition on r_bracket to state [69]

-------------------
lalr_state [69]: {
  [FACTOR ::= l_bracket EXP r_bracket (*) , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
}

-------------------
lalr_state [70]: {
  [FACTOR ::= tid l_par (*) LID r_par , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
  [LID ::= (*) tid , {r_par }]
  [LID ::= (*) tid comma LID , {r_par }]
}
transition on tid to state [72]
transition on LID to state [71]

-------------------
lalr_state [71]: {
  [FACTOR ::= tid l_par LID (*) r_par , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
}
transition on r_par to state [75]

-------------------
lalr_state [72]: {
  [LID ::= tid (*) , {r_par semicolon }]
  [LID ::= tid (*) comma LID , {r_par semicolon }]
}
transition on comma to state [73]

-------------------
lalr_state [73]: {
  [LID ::= (*) tid , {r_par semicolon }]
  [LID ::= tid comma (*) LID , {r_par semicolon }]
  [LID ::= (*) tid comma LID , {r_par semicolon }]
}
transition on tid to state [72]
transition on LID to state [74]

-------------------
lalr_state [74]: {
  [LID ::= tid comma LID (*) , {r_par semicolon }]
}

-------------------
lalr_state [75]: {
  [FACTOR ::= tid l_par LID r_par (*) , {r_par r_bracket semicolon add sub mul div tand tor equals less greater lessequal greaterequal }]
}

-------------------
lalr_state [76]: {
  [EXP ::= EXP (*) sub EXPT , {semicolon add sub }]
  [SENT ::= treturn EXP (*) semicolon , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [EXP ::= EXP (*) add EXPT , {semicolon add sub }]
}
transition on add to state [58]
transition on semicolon to state [77]
transition on sub to state [55]

-------------------
lalr_state [77]: {
  [SENT ::= treturn EXP semicolon (*) , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}

-------------------
lalr_state [78]: {
  [SENT ::= tdo BLQ (*) tuntil l_par LCOND r_par , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on tuntil to state [79]

-------------------
lalr_state [79]: {
  [SENT ::= tdo BLQ tuntil (*) l_par LCOND r_par , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on l_par to state [80]

-------------------
lalr_state [80]: {
  [EXPT ::= (*) EXPT div FACTOR , {add sub mul div equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) constint , {add sub mul div equals less greater lessequal greaterequal }]
  [LCOND ::= (*) LCOND tor LCONDT , {r_par tor }]
  [LCONDF ::= (*) tnot COND , {r_par tand tor }]
  [EXP ::= (*) EXPT , {add sub equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) l_bracket EXP r_bracket , {add sub mul div equals less greater lessequal greaterequal }]
  [LCONDT ::= (*) LCONDF , {r_par tand tor }]
  [EXP ::= (*) EXP add EXPT , {add sub equals less greater lessequal greaterequal }]
  [EXPT ::= (*) FACTOR , {add sub mul div equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) constfloat , {add sub mul div equals less greater lessequal greaterequal }]
  [LCOND ::= (*) LCONDT , {r_par tor }]
  [COND ::= (*) EXP OPR EXP , {r_par tand tor }]
  [EXPT ::= (*) EXPT mul FACTOR , {add sub mul div equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) tid , {add sub mul div equals less greater lessequal greaterequal }]
  [LCONDF ::= (*) COND , {r_par tand tor }]
  [SENT ::= tdo BLQ tuntil l_par (*) LCOND r_par , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [EXP ::= (*) EXP sub EXPT , {add sub equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) tid l_par LID r_par , {add sub mul div equals less greater lessequal greaterequal }]
  [LCONDT ::= (*) LCONDT tand LCONDF , {r_par tand tor }]
}
transition on LCOND to state [81]
transition on tnot to state [44]
transition on EXP to state [43]
transition on l_bracket to state [42]
transition on EXPT to state [41]
transition on LCONDT to state [40]
transition on COND to state [39]
transition on FACTOR to state [38]
transition on constint to state [37]
transition on tid to state [36]
transition on LCONDF to state [35]
transition on constfloat to state [34]

-------------------
lalr_state [81]: {
  [LCOND ::= LCOND (*) tor LCONDT , {r_par tor }]
  [SENT ::= tdo BLQ tuntil l_par LCOND (*) r_par , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on r_par to state [82]
transition on tor to state [46]

-------------------
lalr_state [82]: {
  [SENT ::= tdo BLQ tuntil l_par LCOND r_par (*) , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}

-------------------
lalr_state [83]: {
  [SENT ::= TYPE LID (*) NT$3 semicolon , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [NT$3 ::= (*) , {semicolon }]
}
transition on NT$3 to state [84]

-------------------
lalr_state [84]: {
  [SENT ::= TYPE LID NT$3 (*) semicolon , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on semicolon to state [85]

-------------------
lalr_state [85]: {
  [SENT ::= TYPE LID NT$3 semicolon (*) , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}

-------------------
lalr_state [86]: {
  [SENT ::= tfor l_par (*) tid assig EXP semicolon LCOND semicolon tid assig EXP r_par BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on tid to state [87]

-------------------
lalr_state [87]: {
  [SENT ::= tfor l_par tid (*) assig EXP semicolon LCOND semicolon tid assig EXP r_par BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on assig to state [88]

-------------------
lalr_state [88]: {
  [FACTOR ::= (*) tid , {semicolon add sub mul div }]
  [EXPT ::= (*) FACTOR , {semicolon add sub mul div }]
  [EXP ::= (*) EXPT , {semicolon add sub }]
  [FACTOR ::= (*) constfloat , {semicolon add sub mul div }]
  [FACTOR ::= (*) l_bracket EXP r_bracket , {semicolon add sub mul div }]
  [EXPT ::= (*) EXPT div FACTOR , {semicolon add sub mul div }]
  [EXP ::= (*) EXP sub EXPT , {semicolon add sub }]
  [FACTOR ::= (*) constint , {semicolon add sub mul div }]
  [SENT ::= tfor l_par tid assig (*) EXP semicolon LCOND semicolon tid assig EXP r_par BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [FACTOR ::= (*) tid l_par LID r_par , {semicolon add sub mul div }]
  [EXPT ::= (*) EXPT mul FACTOR , {semicolon add sub mul div }]
  [EXP ::= (*) EXP add EXPT , {semicolon add sub }]
}
transition on l_bracket to state [42]
transition on tid to state [36]
transition on constfloat to state [34]
transition on EXP to state [89]
transition on constint to state [37]
transition on FACTOR to state [38]
transition on EXPT to state [41]

-------------------
lalr_state [89]: {
  [EXP ::= EXP (*) sub EXPT , {semicolon add sub }]
  [SENT ::= tfor l_par tid assig EXP (*) semicolon LCOND semicolon tid assig EXP r_par BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [EXP ::= EXP (*) add EXPT , {semicolon add sub }]
}
transition on add to state [58]
transition on semicolon to state [90]
transition on sub to state [55]

-------------------
lalr_state [90]: {
  [EXPT ::= (*) EXPT div FACTOR , {add sub mul div equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) constint , {add sub mul div equals less greater lessequal greaterequal }]
  [LCOND ::= (*) LCOND tor LCONDT , {semicolon tor }]
  [LCONDF ::= (*) tnot COND , {semicolon tand tor }]
  [EXP ::= (*) EXPT , {add sub equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) l_bracket EXP r_bracket , {add sub mul div equals less greater lessequal greaterequal }]
  [LCONDT ::= (*) LCONDF , {semicolon tand tor }]
  [EXP ::= (*) EXP add EXPT , {add sub equals less greater lessequal greaterequal }]
  [EXPT ::= (*) FACTOR , {add sub mul div equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) constfloat , {add sub mul div equals less greater lessequal greaterequal }]
  [LCOND ::= (*) LCONDT , {semicolon tor }]
  [COND ::= (*) EXP OPR EXP , {semicolon tand tor }]
  [EXPT ::= (*) EXPT mul FACTOR , {add sub mul div equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) tid , {add sub mul div equals less greater lessequal greaterequal }]
  [LCONDF ::= (*) COND , {semicolon tand tor }]
  [EXP ::= (*) EXP sub EXPT , {add sub equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) tid l_par LID r_par , {add sub mul div equals less greater lessequal greaterequal }]
  [SENT ::= tfor l_par tid assig EXP semicolon (*) LCOND semicolon tid assig EXP r_par BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [LCONDT ::= (*) LCONDT tand LCONDF , {semicolon tand tor }]
}
transition on LCOND to state [91]
transition on tnot to state [44]
transition on EXP to state [43]
transition on l_bracket to state [42]
transition on EXPT to state [41]
transition on LCONDT to state [40]
transition on COND to state [39]
transition on FACTOR to state [38]
transition on constint to state [37]
transition on tid to state [36]
transition on LCONDF to state [35]
transition on constfloat to state [34]

-------------------
lalr_state [91]: {
  [SENT ::= tfor l_par tid assig EXP semicolon LCOND (*) semicolon tid assig EXP r_par BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [LCOND ::= LCOND (*) tor LCONDT , {semicolon tor }]
}
transition on semicolon to state [92]
transition on tor to state [46]

-------------------
lalr_state [92]: {
  [SENT ::= tfor l_par tid assig EXP semicolon LCOND semicolon (*) tid assig EXP r_par BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on tid to state [93]

-------------------
lalr_state [93]: {
  [SENT ::= tfor l_par tid assig EXP semicolon LCOND semicolon tid (*) assig EXP r_par BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on assig to state [94]

-------------------
lalr_state [94]: {
  [FACTOR ::= (*) tid , {r_par add sub mul div }]
  [EXPT ::= (*) FACTOR , {r_par add sub mul div }]
  [EXP ::= (*) EXPT , {r_par add sub }]
  [FACTOR ::= (*) constfloat , {r_par add sub mul div }]
  [FACTOR ::= (*) l_bracket EXP r_bracket , {r_par add sub mul div }]
  [EXPT ::= (*) EXPT div FACTOR , {r_par add sub mul div }]
  [SENT ::= tfor l_par tid assig EXP semicolon LCOND semicolon tid assig (*) EXP r_par BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [EXP ::= (*) EXP sub EXPT , {r_par add sub }]
  [FACTOR ::= (*) constint , {r_par add sub mul div }]
  [FACTOR ::= (*) tid l_par LID r_par , {r_par add sub mul div }]
  [EXPT ::= (*) EXPT mul FACTOR , {r_par add sub mul div }]
  [EXP ::= (*) EXP add EXPT , {r_par add sub }]
}
transition on l_bracket to state [42]
transition on tid to state [36]
transition on constfloat to state [34]
transition on EXP to state [95]
transition on constint to state [37]
transition on FACTOR to state [38]
transition on EXPT to state [41]

-------------------
lalr_state [95]: {
  [EXP ::= EXP (*) sub EXPT , {r_par add sub }]
  [EXP ::= EXP (*) add EXPT , {r_par add sub }]
  [SENT ::= tfor l_par tid assig EXP semicolon LCOND semicolon tid assig EXP (*) r_par BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on add to state [58]
transition on r_par to state [96]
transition on sub to state [55]

-------------------
lalr_state [96]: {
  [SENT ::= tfor l_par tid assig EXP semicolon LCOND semicolon tid assig EXP r_par (*) BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [BLQ ::= (*) l_brace NT$0 SENTLIST r_brace , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on BLQ to state [97]
transition on l_brace to state [16]

-------------------
lalr_state [97]: {
  [SENT ::= tfor l_par tid assig EXP semicolon LCOND semicolon tid assig EXP r_par BLQ (*) , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}

-------------------
lalr_state [98]: {
  [FACTOR ::= (*) tid , {semicolon add sub mul div }]
  [EXPT ::= (*) FACTOR , {semicolon add sub mul div }]
  [EXP ::= (*) EXPT , {semicolon add sub }]
  [SENT ::= tid assig (*) EXP semicolon , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [FACTOR ::= (*) constfloat , {semicolon add sub mul div }]
  [FACTOR ::= (*) l_bracket EXP r_bracket , {semicolon add sub mul div }]
  [EXPT ::= (*) EXPT div FACTOR , {semicolon add sub mul div }]
  [EXP ::= (*) EXP sub EXPT , {semicolon add sub }]
  [FACTOR ::= (*) constint , {semicolon add sub mul div }]
  [FACTOR ::= (*) tid l_par LID r_par , {semicolon add sub mul div }]
  [EXPT ::= (*) EXPT mul FACTOR , {semicolon add sub mul div }]
  [EXP ::= (*) EXP add EXPT , {semicolon add sub }]
}
transition on l_bracket to state [42]
transition on tid to state [36]
transition on constfloat to state [34]
transition on EXP to state [103]
transition on constint to state [37]
transition on FACTOR to state [38]
transition on EXPT to state [41]

-------------------
lalr_state [99]: {
  [LID ::= (*) tid , {r_par }]
  [SENT ::= tid l_par (*) LID r_par semicolon , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [LID ::= (*) tid comma LID , {r_par }]
}
transition on tid to state [72]
transition on LID to state [100]

-------------------
lalr_state [100]: {
  [SENT ::= tid l_par LID (*) r_par semicolon , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on r_par to state [101]

-------------------
lalr_state [101]: {
  [SENT ::= tid l_par LID r_par (*) semicolon , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on semicolon to state [102]

-------------------
lalr_state [102]: {
  [SENT ::= tid l_par LID r_par semicolon (*) , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}

-------------------
lalr_state [103]: {
  [EXP ::= EXP (*) sub EXPT , {semicolon add sub }]
  [EXP ::= EXP (*) add EXPT , {semicolon add sub }]
  [SENT ::= tid assig EXP (*) semicolon , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on add to state [58]
transition on semicolon to state [104]
transition on sub to state [55]

-------------------
lalr_state [104]: {
  [SENT ::= tid assig EXP semicolon (*) , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}

-------------------
lalr_state [105]: {
  [EXPT ::= (*) EXPT div FACTOR , {add sub mul div equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) constint , {add sub mul div equals less greater lessequal greaterequal }]
  [LCOND ::= (*) LCOND tor LCONDT , {r_par tor }]
  [LCONDF ::= (*) tnot COND , {r_par tand tor }]
  [EXP ::= (*) EXPT , {add sub equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) l_bracket EXP r_bracket , {add sub mul div equals less greater lessequal greaterequal }]
  [LCONDT ::= (*) LCONDF , {r_par tand tor }]
  [EXP ::= (*) EXP add EXPT , {add sub equals less greater lessequal greaterequal }]
  [EXPT ::= (*) FACTOR , {add sub mul div equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) constfloat , {add sub mul div equals less greater lessequal greaterequal }]
  [LCOND ::= (*) LCONDT , {r_par tor }]
  [COND ::= (*) EXP OPR EXP , {r_par tand tor }]
  [SENT ::= tif l_par (*) LCOND r_par tthen BLQ telse BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [EXPT ::= (*) EXPT mul FACTOR , {add sub mul div equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) tid , {add sub mul div equals less greater lessequal greaterequal }]
  [LCONDF ::= (*) COND , {r_par tand tor }]
  [EXP ::= (*) EXP sub EXPT , {add sub equals less greater lessequal greaterequal }]
  [FACTOR ::= (*) tid l_par LID r_par , {add sub mul div equals less greater lessequal greaterequal }]
  [LCONDT ::= (*) LCONDT tand LCONDF , {r_par tand tor }]
}
transition on LCOND to state [106]
transition on tnot to state [44]
transition on EXP to state [43]
transition on l_bracket to state [42]
transition on EXPT to state [41]
transition on LCONDT to state [40]
transition on COND to state [39]
transition on FACTOR to state [38]
transition on constint to state [37]
transition on tid to state [36]
transition on LCONDF to state [35]
transition on constfloat to state [34]

-------------------
lalr_state [106]: {
  [LCOND ::= LCOND (*) tor LCONDT , {r_par tor }]
  [SENT ::= tif l_par LCOND (*) r_par tthen BLQ telse BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on r_par to state [107]
transition on tor to state [46]

-------------------
lalr_state [107]: {
  [SENT ::= tif l_par LCOND r_par (*) tthen BLQ telse BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on tthen to state [108]

-------------------
lalr_state [108]: {
  [SENT ::= tif l_par LCOND r_par tthen (*) BLQ telse BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [BLQ ::= (*) l_brace NT$0 SENTLIST r_brace , {telse }]
}
transition on BLQ to state [109]
transition on l_brace to state [16]

-------------------
lalr_state [109]: {
  [SENT ::= tif l_par LCOND r_par tthen BLQ (*) telse BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on telse to state [110]

-------------------
lalr_state [110]: {
  [SENT ::= tif l_par LCOND r_par tthen BLQ telse (*) BLQ , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
  [BLQ ::= (*) l_brace NT$0 SENTLIST r_brace , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}
transition on BLQ to state [111]
transition on l_brace to state [16]

-------------------
lalr_state [111]: {
  [SENT ::= tif l_par LCOND r_par tthen BLQ telse BLQ (*) , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}

-------------------
lalr_state [112]: {
  [SENTLIST ::= NT$2 SENT (*) , {treturn l_brace r_brace tif tfor twhile tdo tvoid tint tfloat tid }]
}

-------------------
lalr_state [113]: {
  [TYPE ::= (*) tint , {tid }]
  [TYPE ::= (*) tvoid , {tid }]
  [LISTPARAM ::= LISTPARAM comma (*) TYPE tid , {r_par comma }]
  [TYPE ::= (*) tfloat , {tid }]
}
transition on TYPE to state [116]
transition on tvoid to state [3]
transition on tint to state [2]
transition on tfloat to state [1]

-------------------
lalr_state [114]: {
  [RESTPART ::= tid l_par LISTPARAM r_par (*) BLQ , {EOF tvoid tint tfloat }]
  [BLQ ::= (*) l_brace NT$0 SENTLIST r_brace , {EOF tvoid tint tfloat }]
}
transition on BLQ to state [115]
transition on l_brace to state [16]

-------------------
lalr_state [115]: {
  [RESTPART ::= tid l_par LISTPARAM r_par BLQ (*) , {EOF tvoid tint tfloat }]
}

-------------------
lalr_state [116]: {
  [LISTPARAM ::= LISTPARAM comma TYPE (*) tid , {r_par comma }]
}
transition on tid to state [117]

-------------------
lalr_state [117]: {
  [LISTPARAM ::= LISTPARAM comma TYPE tid (*) , {r_par comma }]
}

-------------------
lalr_state [118]: {
  [PROGRAM ::= PART PROGRAM (*) , {EOF }]
}

-------------------
------- CUP v0.11b 20160615 (GIT 4ac7450) Parser Generation Summary -------
  1 error and 6 warnings
  40 terminals, 21 non-terminals, and 52 productions declared, 
  producing 119 unique parse states.
  3 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  2 conflicts detected (0 expected).
  No code produced.
---------------------------------------------------- (CUP v0.11b 20160615 (GIT 4ac7450))
