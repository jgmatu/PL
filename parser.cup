/* TOKENS */

// terminals
terminal treturn;
terminal l_par;
terminal r_par;
terminal l_brace;
terminal r_brace;
terminal l_bracket;
terminal r_bracket;
terminal comma;
terminal semicolon;
terminal assig;
terminal add;
terminal sub;
terminal mul;
terminal div;
terminal tif;
terminal tthen;
terminal telse;
terminal tfor;
terminal twhile;
terminal tdo;
terminal tuntil;
terminal tnot;
terminal tand;
terminal tor;
terminal equals;
terminal less;
terminal greater;
terminal lessequal;
terminal greaterequal;
terminal include;
terminal hfile;
terminal constint;
terminal constfloat;
terminal String tvoid;
terminal String tint;
terminal String tfloat;
terminal tboolean;
terminal tid;

// non terminals
non terminal PROGRAM;
non terminal PART;
non terminal BLQ;
non terminal SENTLIST;
non terminal SENT;
non terminal EXP;
non terminal EXPT;
non terminal FACTOR;
non terminal String TYPE;
non terminal LID;
non terminal LISTPARAM;
non terminal RESTPART;
non terminal LCOND;
non terminal LCONDT;
non terminal LCONDF;
non terminal COND;
non terminal OPR;

/* GRAMMAR */
PROGRAM ::= PART PROGRAM;
PROGRAM ::= PART;


PART ::= TYPE:type RESTPART {: System.out.println("PART TYPE : " + type); :};


RESTPART ::= tid l_par LISTPARAM r_par BLQ {: System.out.println("InsertaId(func, idLexema)"); :};

RESTPART ::= tid l_par tvoid r_par BLQ;


LISTPARAM ::= LISTPARAM comma TYPE:type tid {: System.out.println("LISTPARAM TYPE: " + type); :};
LISTPARAM ::= TYPE:type tid;


BLQ ::= l_brace {: System.out.println("NuevoEntorno"); :} SENTLIST r_brace {: System.out.println("Salir Entorno"); :};


SENTLIST ::= SENTLIST SENT {: System.out.println("");:};
SENTLIST ::= SENT  {: System.out.println(""); :};


SENT ::= TYPE:type LID semicolon;
SENT ::= tid assig EXP semicolon;
SENT ::= tid l_par LID r_par semicolon;
SENT ::= treturn EXP semicolon;
SENT ::= tif l_par LCOND r_par tthen BLQ telse BLQ;
SENT ::= tfor l_par tid assig EXP semicolon LCOND semicolon tid assig EXP r_par BLQ;
SENT ::= twhile l_par LCOND r_par BLQ;
SENT ::= tdo BLQ tuntil l_par LCOND r_par;
SENT ::= BLQ;

LID ::= tid;
LID ::= tid comma LID; // Devolver tipo de tid a LID...
// LID ::= /* empty */;

EXP ::= EXP add EXPT;
EXP ::= EXP sub EXPT;
EXP ::= EXPT;


EXPT ::= EXPT mul FACTOR;
EXPT ::= EXPT div FACTOR;
EXPT ::= FACTOR;

FACTOR ::= tid l_par LID r_par;
FACTOR ::= l_bracket EXP r_bracket;
FACTOR ::= tid;
FACTOR ::= constint;
FACTOR ::= constfloat;

TYPE ::= tvoid:v {: System.out.println("Type Void : " + v); RESULT = v; :};
TYPE ::= tint:i {: System.out.println("Type  Int: " + i); RESULT = i; :};
TYPE ::= tfloat:f {: System.out.println("Type  Float: " + f); RESULT = f; :};

LCOND ::= LCOND tor LCONDT;
LCOND ::= LCONDT;

LCONDT ::= LCONDT tand LCONDF;
LCONDT  ::=  LCONDF;

LCONDF ::= COND;
LCONDF ::= tnot COND;


COND ::= EXP OPR EXP;

OPR ::=  equals;
OPR ::=  less;
OPR ::=  greater;
OPR ::=  greaterequal;
OPR ::=  lessequal;
